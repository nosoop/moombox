# This is an example configuration file for moombox.
# The configuration file is optional; the application will continue to run without one.
# Depending on how moombox is configured, the location of `config.toml` will vary.
# 
# Note that many of the example values are system-dependent, so you should not be copying this
# file and expecting it all to work.

# Controls the granularity of logs displayed in the standard error stream (incl. Hypercorn).
# The lower the value, the more verbose the log outputs.
# Refer to the numeric values in https://docs.python.org/3/library/logging.html#logging-levels
# As of 0.4.0, you may also use the name of the level (case-sensitive) instead of its numeric
# value.
log_level = "WARNING"

[downloader]
# Controls options within moonarchive, the underlying downloading tool.
# Changes to the downloader options will only take effect on new downloads.

# Overrides the ffmpeg binary used for muxing outputs.
# Omitting this uses the ffmpeg resolved by PATH.  The uncommented path below is a Linux path:
ffmpeg_path = "/opt/ffmpeg-custom/bin/ffmpeg"

# On Windows, use single quotes to ensure backslashes aren't treated as escape sequences:
# ffmpeg_path = 'C:\ffmpeg-7.1-full_build\bin\ffmpeg.exe'

# Overrides the directory where files are stored while being downloaded and while being muxed.
# Such files will be located in a subdirectory named after its individual job ID.
# This ideally should be on a fast storage device if one is available.
# Parent directories are created as needed; config file validation will fail if the directory
# does not exist and could not be created.
staging_directory = '/opt/moombox/staging'

# Overrides the default directory where final output files are copied.
# Such files are not placed into a subdirectory.  This should be on a large storage device.
output_directory = '/opt/moombox/output'

# Maximum number of fragment downloads to have in-flight for each stream (each broadcast has at
# least one video and one audio stream).
num_parallel_downloads = 1

# Use proof-of-origin when making requests.
# See https://github.com/nosoop/moonarchive?tab=readme-ov-file#proof-of-origin-downloads
# Visitor data is expected to have escaped "%3D" sequences in place of "=", while POTokens have
# "=" directly.
po_token = "long-base64-encoded-value-here"
visitor_data = "shorter-escaped-base64-value-here"

# In place of visitor_data, or if you have an account that has access to non-public content,
# you can specify the path to a cookie file in Netscape format.  You will still need to provide
# the corresponding po_token.
# 
# There are some very important things to note about using this functionality:
# - moombox's feed monitoring currently only processes public live streams.  You will need to
#   add any members-only content yourself (or write a separate script to automate the process).
# - Accesses to cookie files are currently not asynchronous.  That shouldn't affect most users,
#   but any latency in accessing the file (as it is loaded on-demand) may cause noticeable
#   hiccups in the web interface.
# - Authenticated usage isn't as extensively tested as the visitor-only code paths.  As such,
#   it is strongly recommended that a separate instance of moombox is used for members-only
#   content.  While the underlying moonarchive module tries to be a good steward, YouTube's
#   ever-changing machinery may cause authenticated usage to break in ways that may put the
#   associated account at risk.  This is true for similar projects like yt-dlp, and remains true
#   for this application.  This serves as your warning.
# 
# Again, if you're using visitor data, make sure to comment this value out or omit it entirely.
cookie_file = "/path/to/your/cookie_file.txt"

[tasklist]
# Controls the task view.

# Hides completed downloads older than the given number of days.
hide_finished_age_days = 30

[healthchecks]
# Configuration options for the healthcheck system.

# Toggles whether or not automated healthchecks are enabled.
enable_scheduled = false

[[notifications]]
# Notifications are handled by apprise, so refer to the supported notifications for the syntax:
# https://github.com/caronc/apprise?tab=readme-ov-file#supported-notifications
# 
# You may define as many notification targets as you'd like.
url = "discord://webhook_id/webhook_token"

# moombox broadcasts notifications based on tags.
# Tags have a category prefix:
#   - 'status' prefix are for notifications sent on download task status change
#   - 'monitor-feed' prefix for when upcoming streams matching criteria are detected
tags = [ "status:downloading", "status:finished", "status:error", "monitor-feed:found" ]

[[channels]]
# moombox is able to poll the RSS feed for upcoming streams with title / description matches.
# 
# Feeds are currently polled every 10 minutes and will always reflect the current version of the
# configuration file.
id = "UCW5uhrG1eCBYditmhL0Ykjw"

# A friendly name may be specified for notifications; otherwise it will use the channel name.
name = "Elizabeth Rose Bloodflame"

# The 'terms' table maps key phrases to regular expressions to scan for in upcoming streams'
# titles and descriptions.  Notifications will indicate which terms are present.
# 
# IMPORTANT:  If no terms are provided, no streams will be automatically downloaded!  To
# download every stream, use a wildcard entry `terms."(all)" = '(.*)'`.
terms."karaoke" = '(?i)(\W|^)karaoke'
terms."unarchived" = '(?i)(\W|^)unar?chived?'
terms."rebroadcast" = '(?i)(\W|^)re-?broadcast'

# Determines how many older video items to scan through to identify description lines that are
# unique to a given video.  This attempts to reduce false positives when a streamer uses some
# default boilerplate that includes keyword matches.
num_desc_lookbehind = 2

# Optional custom output path override for streams.
# 
# NOTE: At this time, this only applies to videos that were automatically added via feed
# monitoring.  Videos manually scheduled for download are not currently checked for a
# corresponding channel match.
output_directory = "/opt/moombox/output/liz"

# Whether or not premieres of non-live content are also downloaded.
# This is false by default.
# 
# A reminder that this only downloads video premieres, and will not download the non-premiere
# version.  Use yt-dlp if you want that.
include_non_live_content = true
